<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.himi.love.mapper.PostMapper">
    <resultMap id="BaseResultMap" type="com.himi.love.model.Post">
        <id column="PostID" jdbcType="INTEGER" property="postID" />
        <result column="Content" jdbcType="VARCHAR" property="content" />
        <result column="UserID" jdbcType="INTEGER" property="userID" />
        <result column="CoupleID" jdbcType="INTEGER" property="coupleID" />
        <result column="LocationID" jdbcType="INTEGER" property="locationID" />
        <result column="CreatedAt" jdbcType="TIMESTAMP" property="createdAt" />
        <result column="UpdatedAt" jdbcType="TIMESTAMP" property="updatedAt" />
        <result column="IsDeleted" jdbcType="BOOLEAN" property="isDeleted" />
    </resultMap>

    <resultMap id="PostDTOResultMap" type="com.himi.love.dto.PostDTO">
        <id property="postID" column="PostID"/>
        <result property="content" column="Content"/>
        <result property="userID" column="UserID"/>
        <result property="userName" column="UserName"/>
        <result property="nickName" column="NickName"/>
        <result property="userAvatar" column="Avatar"/>
        <result property="coupleID" column="CoupleID"/>
        <result property="locationID" column="LocationID"/>
        <result property="createdAt" column="CreatedAt"/>
        <result property="updatedAt" column="UpdatedAt"/>
        <result property="isDeleted" column="IsDeleted"/>
        
        <collection property="location" ofType="com.himi.love.dto.LocationDTO" column="LocationID" select="selectLocationByLocationId"/>
        <collection property="images" ofType="com.himi.love.dto.ImageDTO" column="PostID" select="selectImagesByPostId"/>
        <collection property="tags" ofType="com.himi.love.dto.TagDTO" column="PostID" select="selectTagsByPostId"/>
        <collection property="entities" ofType="com.himi.love.dto.EntityDTO" column="PostID" select="selectEntitiesByPostId"/>
        <collection property="comments" ofType="com.himi.love.dto.CommentDTO" column="PostID" select="selectCommentsByPostId"/>
    </resultMap>

    <select id="findById" resultMap="BaseResultMap">
        SELECT * FROM Post WHERE PostID = #{postId} AND IsDeleted = false
    </select>

    <select id="findAll" resultMap="BaseResultMap">
        SELECT * FROM Post WHERE IsDeleted = false ORDER BY CreatedAt DESC
    </select>

    <select id="findByUserId" resultMap="BaseResultMap">
        SELECT * FROM Post WHERE UserID = #{userId} AND IsDeleted = false ORDER BY CreatedAt DESC
    </select>

    <select id="findByCoupleId" resultMap="BaseResultMap">
        SELECT * FROM Post WHERE CoupleID = #{coupleId} AND IsDeleted = false ORDER BY CreatedAt DESC
    </select>

    <select id="findByLocationId" resultMap="BaseResultMap">
        SELECT * FROM Post WHERE LocationID = #{locationId} AND IsDeleted = false ORDER BY CreatedAt DESC
    </select>

    <select id="findByCoupleIdWithPagination" resultMap="BaseResultMap">
        SELECT * FROM Post 
        WHERE CoupleID = #{coupleId} AND IsDeleted = false 
        ORDER BY CreatedAt DESC
        LIMIT #{offset}, #{limit}
    </select>

    <insert id="insert" parameterType="com.himi.love.model.Post" useGeneratedKeys="true" keyProperty="postID">
        INSERT INTO Post (Content, UserID, CoupleID, LocationID, CreatedAt, UpdatedAt, IsDeleted)
        VALUES (#{content}, #{userID}, #{coupleID}, #{locationID}, #{createdAt}, #{updatedAt}, #{isDeleted})
    </insert>

    <select id="getLastInsertId" resultType="Integer">
        SELECT PostID FROM Post ORDER BY CreatedAt DESC LIMIT 1
    </select>

    <update id="update" parameterType="com.himi.love.model.Post">
        UPDATE Post
        SET Content = #{content},
            UpdatedAt = #{updatedAt},
            IsDeleted = #{isDeleted}
        WHERE PostID = #{postID}
    </update>

    <update id="deleteById">
        UPDATE Post SET IsDeleted = true, UpdatedAt = NOW() WHERE PostID = #{postId}
    </update>

    <select id="selectLocationByLocationId" resultType="com.himi.love.dto.LocationDTO">
        SELECT LocationID, LocationName, Latitude, Longitude
        FROM Location 
        WHERE LocationID = #{locationID}
    </select>

    <select id="selectImagesByPostId" resultType="com.himi.love.dto.ImageDTO">
        SELECT ImageID, ImageURL, PostID, OrderIndex
        FROM Image
        WHERE PostID = #{PostID}
    </select>

    <select id="selectTagsByPostId" resultType="com.himi.love.dto.TagDTO">
        SELECT t.TagID, t.TagName, t.CreatorID
        FROM Tag t
        JOIN Post_Tag pt ON t.TagID = pt.TagID
        WHERE pt.PostID = #{PostID}
    </select>

    <select id="selectEntitiesByPostId" resultType="com.himi.love.dto.EntityDTO">
        SELECT e.EntityID, e.EntityName, e.EntityType, e.Avatar, e.CoupleID
        FROM Entity e
        JOIN Post_Entity pe ON e.EntityID = pe.EntityID
        WHERE pe.PostID = #{PostID}
    </select>

    <select id="selectCommentsByPostId" resultType="com.himi.love.dto.CommentDTO">
        SELECT c.CommentID, c.Content, c.UserID, c.PostID, c.ParentCommentID, c.IsDeleted, c.CreatedAt, c.UpdatedAt,
            u.UserName, u.NickName, u.Avatar as UserAvatar
        FROM Comment c
        JOIN User u ON c.UserID = u.UserID
        WHERE c.PostID = #{PostID}
        ORDER BY c.CreatedAt ASC
    </select>

    <select id="findPostDetailById" resultMap="PostDTOResultMap">
        SELECT 
            p.*,
            u.UserName,
            u.NickName,
            u.Avatar
        FROM Post p
        LEFT JOIN User u ON p.UserID = u.UserID
        WHERE p.PostID = #{postId} 
        AND p.IsDeleted = false
    </select>

    <select id="findPostDetailsByCoupleIdWithPagination" resultMap="PostDTOResultMap">
        SELECT 
            p.*,
            u.UserName,
            u.NickName,
            u.Avatar
        FROM Post p
        LEFT JOIN User u ON p.UserID = u.UserID
        WHERE p.CoupleID = #{coupleId} 
        AND p.IsDeleted = false 
        ORDER BY p.CreatedAt DESC 
        LIMIT #{offset}, #{limit}
    </select>
</mapper>